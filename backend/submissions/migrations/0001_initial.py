# Generated by Django 5.2.7 on 2025-10-18 09:35

import django.core.validators
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AdditionalInvoiceFee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "claim_kind",
                    models.CharField(
                        choices=[
                            ("fuel", "Fuel/Travel"),
                            ("call_out", "Call Out"),
                            ("forensic", "Forensic Work"),
                        ],
                        help_text="Type of additional fee",
                        max_length=20,
                    ),
                ),
                (
                    "units",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Number of units (km for fuel, hours for forensic, times for call out)",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Optional description of the fee",
                        max_length=200,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Additional Invoice Fee",
                "verbose_name_plural": "Additional Invoice Fees",
            },
        ),
        migrations.CreateModel(
            name="BotanicalAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "determination",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pending", "Pending Assessment"),
                            ("cannabis_sativa", "Cannabis sativa"),
                            ("cannabis_indica", "Cannabis indica"),
                            ("cannabis_hybrid", "Cannabis (hybrid)"),
                            ("mixed", "Mixed"),
                            ("papaver_somniferum", "Papaver somniferum"),
                            ("degraded", "Degraded"),
                            ("not_cannabis", "Not Cannabis"),
                            ("unidentifiable", "Unidentifiable"),
                            ("inconclusive", "Inconclusive"),
                        ],
                        help_text="Botanical determination result",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "assessment_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the botanical assessment was performed",
                        null=True,
                    ),
                ),
                (
                    "botanist_notes",
                    models.TextField(
                        blank=True,
                        help_text="Detailed notes from botanical assessment",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Botanical Assessment",
                "verbose_name_plural": "Botanical Assessments",
            },
        ),
        migrations.CreateModel(
            name="Certificate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "certificate_number",
                    models.CharField(
                        blank=True,
                        help_text="Auto-generated certificate number (e.g., CRT2024-001)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "pdf_generating",
                    models.BooleanField(
                        default=False,
                        help_text="Whether PDF is currently being generated",
                    ),
                ),
                (
                    "pdf_file",
                    models.FileField(
                        blank=True,
                        help_text="Generated PDF certificate",
                        null=True,
                        upload_to="certificates/",
                    ),
                ),
                (
                    "pdf_size",
                    models.PositiveIntegerField(
                        default=0, help_text="Size of the PDF in bytes"
                    ),
                ),
            ],
            options={
                "verbose_name": "Certificate",
                "verbose_name_plural": "Certificates",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DrugBag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("plant", "Plant Material"),
                            ("plant_material", "Plant Material (Generic)"),
                            ("cutting", "Cutting"),
                            ("stalk", "Stalk"),
                            ("stem", "Stem"),
                            ("seed", "Seed"),
                            ("seed_material", "Seed Material"),
                            ("unknown_seed", "Unknown Seed"),
                            ("seedling", "Seedling"),
                            ("head", "Head"),
                            ("rootball", "Rootball"),
                            ("poppy", "Poppy"),
                            ("poppy_plant", "Poppy Plant"),
                            ("poppy_capsule", "Poppy Capsule"),
                            ("poppy_head", "Poppy Head"),
                            ("poppy_seed", "Poppy Seed"),
                            ("mushroom", "Mushroom"),
                            ("tablet", "Tablet"),
                            ("unknown", "Unknown"),
                            ("unsure", "Unsure"),
                        ],
                        default="plant",
                        max_length=20,
                    ),
                ),
                (
                    "seal_tag_numbers",
                    models.CharField(
                        help_text="Original Drug Movement Bag tag number",
                        max_length=100,
                        verbose_name="Original Tag Number",
                    ),
                ),
                (
                    "new_seal_tag_numbers",
                    models.CharField(
                        blank=True,
                        help_text="New Drug Movement Bag tag number (if resealed)",
                        max_length=100,
                        null=True,
                        verbose_name="New Tag Number",
                    ),
                ),
                (
                    "property_reference",
                    models.CharField(
                        blank=True,
                        help_text="Police property reference number",
                        max_length=20,
                        null=True,
                        verbose_name="Property Reference",
                    ),
                ),
                (
                    "gross_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Total weight including bag/container (grams)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "net_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Weight of specimens only (grams)",
                        max_digits=8,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Drug Bag",
                "verbose_name_plural": "Drug Bags",
            },
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "invoice_number",
                    models.CharField(
                        blank=True,
                        help_text="Auto-generated invoice number (e.g., INV2024-001)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "customer_number",
                    models.CharField(
                        help_text="Customer reference number", max_length=20
                    ),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Subtotal before tax",
                        max_digits=10,
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Tax amount",
                        max_digits=10,
                    ),
                ),
                (
                    "total",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total amount including tax",
                        max_digits=10,
                    ),
                ),
                (
                    "pdf_generating",
                    models.BooleanField(
                        default=False,
                        help_text="Whether PDF is currently being generated",
                    ),
                ),
                (
                    "pdf_file",
                    models.FileField(
                        blank=True,
                        help_text="Generated PDF invoice",
                        null=True,
                        upload_to="invoices/",
                    ),
                ),
                (
                    "pdf_size",
                    models.PositiveIntegerField(
                        default=0, help_text="Size of the PDF in bytes"
                    ),
                ),
            ],
            options={
                "verbose_name": "Invoice",
                "verbose_name_plural": "Invoices",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="Original row_id from ETL processing for cannabis data import",
                        max_length=20,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "case_number",
                    models.CharField(
                        help_text="Unique case identifier", max_length=50, unique=True
                    ),
                ),
                (
                    "received",
                    models.DateTimeField(help_text="When the submission was received"),
                ),
                (
                    "is_draft",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this submission is a draft (work-in-progress)",
                    ),
                ),
                (
                    "phase",
                    models.CharField(
                        choices=[
                            ("data_entry", "Data Entry"),
                            ("finance_approval", "Finance Approval"),
                            ("botanist_review", "Botanist Review"),
                            ("documents", "Documents"),
                            ("send_emails", "Send Emails"),
                            ("complete", "Complete"),
                        ],
                        default="data_entry",
                        help_text="Current phase of the submission workflow",
                        max_length=30,
                    ),
                ),
                (
                    "security_movement_envelope",
                    models.CharField(
                        help_text="Security Movement Envelope number for the bags",
                        max_length=20,
                        verbose_name="Security Movement Envelope",
                    ),
                ),
                (
                    "internal_comments",
                    models.TextField(
                        blank=True,
                        help_text="Any internal comments not showing on certificate",
                        null=True,
                        verbose_name="Internal Comments",
                    ),
                ),
                (
                    "forensic_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Number of forensic hours (e.g., 2.5 for 2 hours 30 minutes)",
                        max_digits=6,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "fuel_distance_km",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Distance traveled in kilometers for fuel cost calculation",
                        max_digits=8,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                ("finance_approved_at", models.DateTimeField(blank=True, null=True)),
                ("botanist_approved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "certificates_generated_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("invoices_generated_at", models.DateTimeField(blank=True, null=True)),
                ("emails_sent_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Submission",
                "verbose_name_plural": "Submissions",
                "ordering": ["-received"],
            },
        ),
        migrations.CreateModel(
            name="SubmissionPhaseHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "from_phase",
                    models.CharField(
                        choices=[
                            ("data_entry", "Data Entry"),
                            ("finance_approval", "Finance Approval"),
                            ("botanist_review", "Botanist Review"),
                            ("documents", "Documents"),
                            ("send_emails", "Send Emails"),
                            ("complete", "Complete"),
                        ],
                        help_text="Phase the submission was in before this transition",
                        max_length=30,
                    ),
                ),
                (
                    "to_phase",
                    models.CharField(
                        choices=[
                            ("data_entry", "Data Entry"),
                            ("finance_approval", "Finance Approval"),
                            ("botanist_review", "Botanist Review"),
                            ("documents", "Documents"),
                            ("send_emails", "Send Emails"),
                            ("complete", "Complete"),
                        ],
                        help_text="Phase the submission moved to",
                        max_length=30,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[("advance", "Advanced"), ("send_back", "Sent Back")],
                        help_text="Type of action that caused this transition",
                        max_length=20,
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        blank=True, help_text="Reason for send-back actions", null=True
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this transition occurred"
                    ),
                ),
            ],
            options={
                "verbose_name": "Phase History Entry",
                "verbose_name_plural": "Phase History Entries",
                "ordering": ["-timestamp"],
            },
        ),
    ]
