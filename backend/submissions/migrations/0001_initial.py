# Generated by Django 5.2.6 on 2025-09-13 09:53

import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("police", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Defendant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        help_text="First name or given names.",
                        max_length=100,
                        null=True,
                        verbose_name="First Name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        help_text="Last name or surname.",
                        max_length=100,
                        null=True,
                        verbose_name="Last Name",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Defendant",
                "verbose_name_plural": "Defendants",
            },
        ),
        migrations.CreateModel(
            name="DrugBag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("plant", "Plant Material"),
                            ("plant_striking", "Plant Striking"),
                            ("seed", "Seed"),
                            ("seedling", "Seedling"),
                            ("poppy", "Poppy Capsule"),
                            ("rootball", "Rootball"),
                            ("resin", "Resin/Hash"),
                            ("other", "Other"),
                            ("unknown", "Unknown"),
                        ],
                        default="plant",
                        max_length=20,
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=1, help_text="Number of specimens/items in bag"
                    ),
                ),
                (
                    "suspected_as",
                    models.CharField(
                        default="Cannabis",
                        help_text="What specimens are suspected to be (according to police)",
                        max_length=100,
                    ),
                ),
                (
                    "seal_tag_number",
                    models.CharField(
                        help_text="Original Drug Movement Bag tag number",
                        max_length=100,
                        verbose_name="Original Tag Number",
                    ),
                ),
                (
                    "new_seal_tag_number",
                    models.CharField(
                        blank=True,
                        help_text="New Drug Movement Bag tag number (if resealed)",
                        max_length=100,
                        null=True,
                        verbose_name="New Tag Number",
                    ),
                ),
                (
                    "property_reference",
                    models.CharField(
                        help_text="Police property reference number",
                        max_length=20,
                        verbose_name="Property Reference",
                    ),
                ),
                (
                    "gross_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Total weight including bag/container (grams)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "net_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Weight of specimens only (grams)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Drug Bag",
                "verbose_name_plural": "Drug Bags",
            },
        ),
        migrations.CreateModel(
            name="BotanicalAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "determination",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pending", "Pending Assessment"),
                            ("cannabis_sativa", "Cannabis sativa"),
                            ("cannabis_indica", "Cannabis indica"),
                            ("cannabis_hybrid", "Cannabis (hybrid)"),
                            ("degraded", "Degraded"),
                            ("not_cannabis", "Not Cannabis"),
                            ("inconclusive", "Inconclusive"),
                        ],
                        help_text="Botanical determination result",
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "assessment_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the assessment was completed (on-site at police station)",
                        null=True,
                    ),
                ),
                (
                    "botanist_notes",
                    models.TextField(
                        blank=True,
                        help_text="Detailed notes from botanical assessment",
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "drug_bag",
                    models.OneToOneField(
                        help_text="The drug bag being assessed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessment",
                        to="submissions.drugbag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Botanical Assessment",
                "verbose_name_plural": "Botanical Assessments",
            },
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "case_number",
                    models.CharField(
                        help_text="Unique case identifier", max_length=50, unique=True
                    ),
                ),
                (
                    "received",
                    models.DateTimeField(help_text="When the submission was received"),
                ),
                (
                    "phase",
                    models.CharField(
                        choices=[
                            ("data_entry_start", "Data Entry"),
                            ("finance_approval_provided", "Finance Approval"),
                            ("botanist_approval_provided", "Botanist Approval"),
                            ("in_review", "Review"),
                            ("certificate_generation_start", "Certificate Generation"),
                            ("invoice_generation_start", "Invoice Generation"),
                            ("sending_emails", "Sending Emails"),
                            ("complete", "Complete"),
                        ],
                        default="data_entry_start",
                        help_text="Current phase of the submission workflow",
                        max_length=30,
                    ),
                ),
                (
                    "assessment_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes from botanist to appear in section c of certificate",
                        null=True,
                        verbose_name="Botanist Notes",
                    ),
                ),
                (
                    "security_movement_envelope",
                    models.CharField(
                        help_text="Security Movement Envelope number for the bags",
                        max_length=20,
                        verbose_name="Security Movement Envelope",
                    ),
                ),
                ("finance_approved_at", models.DateTimeField(blank=True, null=True)),
                ("botanist_approved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "certificates_generated_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("invoices_generated_at", models.DateTimeField(blank=True, null=True)),
                ("emails_sent_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "approved_botanist",
                    models.ForeignKey(
                        blank=True,
                        help_text="The approved botanist handling this submission",
                        limit_choices_to={"role": "botanist"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="botanist_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "defendants",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Defendants involved in this case",
                        related_name="submissions",
                        to="submissions.defendant",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "finance_officer",
                    models.ForeignKey(
                        blank=True,
                        help_text="The finance officer handling this submission",
                        limit_choices_to={"role": "finance"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="finance_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "requesting_officer",
                    models.ForeignKey(
                        blank=True,
                        help_text="The original officer requesting the submission",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="submissions_requested",
                        to="police.policeofficer",
                    ),
                ),
                (
                    "submitting_officer",
                    models.ForeignKey(
                        blank=True,
                        help_text="The officer submitting on behalf of requesting officer",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="submissions_made",
                        to="police.policeofficer",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Submission",
                "verbose_name_plural": "Submissions",
                "ordering": ["-received"],
            },
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "invoice_number",
                    models.CharField(
                        blank=True,
                        help_text="Auto-generated invoice number (e.g., INV2024-001)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "customer_number",
                    models.CharField(
                        help_text="Customer reference number", max_length=20
                    ),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Subtotal before tax",
                        max_digits=10,
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Tax amount",
                        max_digits=10,
                    ),
                ),
                (
                    "total",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total amount including tax",
                        max_digits=10,
                    ),
                ),
                (
                    "pdf_generating",
                    models.BooleanField(
                        default=False,
                        help_text="Whether PDF is currently being generated",
                    ),
                ),
                (
                    "pdf_file",
                    models.FileField(
                        blank=True,
                        help_text="Generated PDF invoice",
                        null=True,
                        upload_to="invoices/",
                    ),
                ),
                (
                    "pdf_size",
                    models.PositiveIntegerField(
                        default=0, help_text="Size of the PDF in bytes"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invoices",
                        to="submissions.submission",
                    ),
                ),
            ],
            options={
                "verbose_name": "Invoice",
                "verbose_name_plural": "Invoices",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="drugbag",
            name="submission",
            field=models.ForeignKey(
                help_text="The submission this bag belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bags",
                to="submissions.submission",
            ),
        ),
        migrations.CreateModel(
            name="Certificate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "certificate_number",
                    models.CharField(
                        blank=True,
                        help_text="Auto-generated certificate number (e.g., CRT2024-001)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "pdf_generating",
                    models.BooleanField(
                        default=False,
                        help_text="Whether PDF is currently being generated",
                    ),
                ),
                (
                    "pdf_file",
                    models.FileField(
                        blank=True,
                        help_text="Generated PDF certificate",
                        null=True,
                        upload_to="certificates/",
                    ),
                ),
                (
                    "pdf_size",
                    models.PositiveIntegerField(
                        default=0, help_text="Size of the PDF in bytes"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certificates",
                        to="submissions.submission",
                    ),
                ),
            ],
            options={
                "verbose_name": "Certificate",
                "verbose_name_plural": "Certificates",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AdditionalInvoiceFee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "claim_kind",
                    models.CharField(
                        choices=[
                            ("fuel", "Fuel/Travel"),
                            ("call_out", "Call Out"),
                            ("forensic", "Forensic Work"),
                        ],
                        help_text="Type of additional fee",
                        max_length=20,
                    ),
                ),
                (
                    "units",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Number of units (km for fuel, hours for forensic, times for call out)",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Optional description of the fee",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        help_text="The submission this fee relates to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="additional_fees",
                        to="submissions.submission",
                    ),
                ),
            ],
            options={
                "verbose_name": "Additional Invoice Fee",
                "verbose_name_plural": "Additional Invoice Fees",
            },
        ),
        migrations.AlterUniqueTogether(
            name="drugbag",
            unique_together={("submission", "seal_tag_number")},
        ),
    ]
