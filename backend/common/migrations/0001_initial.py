# Generated by Django 5.2.7 on 2025-10-18 09:35

import django.core.validators
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="SystemSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cost_per_certificate",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("110.00"),
                        help_text="Cost per certificate in dollars",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "cost_per_bag",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("11.00"),
                        help_text="Cost per bag identification in dollars",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "call_out_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("200.00"),
                        help_text="Fixed call out fee in dollars",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "cost_per_forensic_hour",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("150.00"),
                        help_text="Cost per hour of forensic work in dollars",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "cost_per_kilometer_fuel",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("1.750"),
                        help_text="Cost per kilometer for fuel in dollars",
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.001"))
                        ],
                    ),
                ),
                (
                    "tax_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("10.00"),
                        help_text="Tax percentage (e.g., 10.00 for 10%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                (
                    "forward_certificate_emails_to",
                    models.EmailField(
                        default="jarid.prince@dbca.wa.gov.au",
                        help_text="Email address to forward certificate notifications to",
                        max_length=254,
                    ),
                ),
                (
                    "certificate_counter",
                    models.PositiveIntegerField(
                        default=1, help_text="Next certificate number to assign"
                    ),
                ),
                (
                    "invoice_counter",
                    models.PositiveIntegerField(
                        default=1, help_text="Next invoice number to assign"
                    ),
                ),
            ],
            options={
                "verbose_name": "System Settings",
                "verbose_name_plural": "System Settings",
            },
        ),
    ]
